int scn;
final int W=64, H=64;
PImage bk, platform1, platform2, laser;
//PImage player;
float x, x2 = 0;
float y, y2 = 9*H;
boolean left, right, up, down, space;
boolean a, d, up2, s;

Player p1;
Player p2;
Platform [] platforms;
static final int MENU = 0;
static final int GAME = 1;
static final int GAMEOVER =9;

Bullet [] bullets;
int nextBullet;
int frames;

Timer firingTimer;

//float rectx=300;
//float recty=680;


void setup() {
  size(1024, 1024);
  scn = MENU;
  bk = loadImage("backgroundCastles.png");

  laser = loadImage("laser.png");
  p1= new Player();

  bullets = new Bullet [50];
  firingTimer = new Timer(500);
  firingTimer.start();


  for (int i = 0; i < bullets.length; ++i) {
    bullets[i] = new Bullet();
  }
}

void draw() {
  background(0);
  //p1.update();
  //p1.checkBoundaries();
  switch(scn) {
  case MENU: 
    scene0(); 
    break;

  case GAME: 
    scene1(); 
    break;

  case GAMEOVER : 
    scene9();
    break;
  }
}
void keyPressed() {
  switch (keyCode) {
  case 37://left
    left = true;
    break;
  case 39://right
    right = true;
    break;
  case 38://up
    up = true;
    break;
  case 40://down
    down = true;
    break;
  case 32: //space
    space = true;
    break;

  }
}
void keyReleased() {
  switch (keyCode) {
  case 37://left
    left = false;
    break;
  case 39://right
    right = false;
    break;
  case 38://up
    up = false;
    break;
  case 40://down
    down = false;
    break;
  case 32: //space
    space = false;
    break;


  }
}

void rectangleCollisions(Player r1, Platform r2) {
  ////r1 is the player
  ////r2 is the platform rectangle
  float dx = (r1.x+r1.w/2) - (r2.x+r2.w/2);
  float dy = (r1.y+r1.h/2) - (r2.y+r2.h/2);

  float combinedHalfWidths = r1.halfWidth + r2.halfWidth;
  float combinedHalfHeights = r1.halfHeight + r2.halfHeight;

  if (abs(dx) < combinedHalfWidths) {
    ////a collision may be happening
    ////now check on the y axis
    if (abs(dy) < combinedHalfHeights) {
      ////excellent. they are overlapping
      //determine the overlap on each axis
      float overlapX = combinedHalfWidths - abs(dx);
      float overlapY = combinedHalfHeights - abs(dy);
      ////the collision is on the axis with the 
      ////SMALLEST about of overlap
      if (overlapX >= overlapY) {
        if (dy > 0) {
          r1.collisionSide = "top";
          ////move the rectangle back to eliminate overlap
          ////before calling its display to prevent
          ////drawing object inside each other
          r1.y += overlapY;
          // println("collisionSide: "+r1.collisionSide);
        } else {
          r1.collisionSide = "bottom";
          r1.y -= overlapY;
          // println("collisionSide: "+r1.collisionSide);
        }
      } else {
        if (dx > 0) {
          r1.collisionSide = "left";
          r1.x += overlapX;
          // println("collisionSide: "+r1.collisionSide);
        } else {
          r1.collisionSide = "right";
          r1.x -= overlapX;
          // println("collisionSide: "+r1.collisionSide);
        }
      }
    } else {
      r1.collisionSide = "none";
    }
  } else {
    r1.collisionSide = "none";
  }
  // return collisionSide;
}

class Timer {
  int startTime;
  int interval;

  Timer(int tempTime) {
    interval=tempTime;
  }

  void start() {
    startTime=millis();
  }

  boolean isFinished() {
    int elapsedTime = millis() - startTime;
    if (elapsedTime>interval) {
      return true;
    } else {
      return false;
    }
  }
}

  class Platform{
  float w,h,x,y;
  String typeof;
  float halfWidth, halfHeight;

  Platform(float _x, float _y, float _w, float _h, String _typeof){
    w = _w;
    h = _h;
    x = _x;
    y = _y;
    typeof = _typeof;

    halfWidth = w/2;
    halfHeight = h/2;
  }

  void display(){

    
    
    image(platform1, 0, 11*H);
    image(platform1, W, 11*H);
    image(platform1, 2*W, 11*H);
    image(platform1, 3*W, 11*H);
    image(platform1, 4*W, 11*H);
    image(platform2, 5*W, 11*H);
    
    image(platform1, 9*W, 13*H);
    image(platform1, 10*W, 13*H);
    image(platform1, 11*W, 13*H);
    
    image(platform1, 13*W, 11*H);
    image(platform1, 14*W, 11*H);
    image(platform1, 15*W, 11*H);




  }
}


class Player {

  //PLAYER1
  PImage p1 = loadImage("zombie.png");
  float w, h, x, y, vx, vy, 
    accelerationX, accelerationY, 
    speedLimit, friction, bounce, gravity;
  boolean isOnGround;
  float jumpForce;
  float halfWidth, halfHeight;
  int currentFrame;
  String collisionSide;
  boolean facingRight;
  int frameSequence;






  Player() {
    //w = 140;
    //h = 95;
    x = 10;
    y = 150;
    //x2=500;
    //y2 =150;
    vx = 0;
    vy = 0;
    accelerationX = 0;
    accelerationY = 0;
    speedLimit = 5;
    friction = 0.96;
    bounce = -0.7;
    gravity = 3;
    isOnGround = false;
    jumpForce = -10;

    currentFrame = 0;
    collisionSide = "";
    frameSequence = 6;



  }
  void update() {
    if (left) {
      accelerationX = -0.2;
      friction = 1;
      facingRight = false;
    }
    if (right) {
      accelerationX = 0.2;
      friction = 1;
      facingRight = true;
    }
    if (!left&&!right) {
      accelerationX = 0;
      friction = 0.96;
      gravity = 0.3;
    } else if (left&&right) {
      accelerationX = 0;
      friction = 0.96;
      gravity = 0.3;
    }
    if (up && isOnGround) {
      vy += jumpForce;
      isOnGround = false;
      friction = 1;
    }
    vx += accelerationX;
    vy += accelerationY;

    ////apply the forces of the universe
    if (isOnGround) {
      vx *= friction;
    }
    vy += gravity;

    ////correct for maximum speeds
    if (vx > speedLimit) {
      vx = speedLimit;
    }
    if (vx < -speedLimit) {
      vx = -speedLimit;
    }
    if (vy > speedLimit * 2) {
      vy = speedLimit * 2;
    }
    ////move the player
    x+=vx;
    y+=vy;
  }



  void display1() {
    image(p1, x, y);
  }



  void checkBoundaries() {

    if (x < 0) {

      x = 0;
    }
    if (x  > width-50) {

      x = width-50;
    }
    if (y < 0) {
    }
    if (y > height-100) {
      scn=9;
      x = 10;
      y = 150;
      vx = 0;
      vy = 0;
      accelerationX = 0;
      accelerationY = 0;
      speedLimit = 5;
      friction = 0.96;
      bounce = -0.7;
      gravity = 3;
      isOnGround = false;
      jumpForce = -10;


      currentFrame = 0;
      collisionSide = "";
      frameSequence = 6;
    }
  }


  void checkPlatforms() {
    ////update for platform collisions
    if (collisionSide == "bottom" && vy >= 0) {
      isOnGround = true;
      ////flip gravity to neutralize gravity's effect
      vy = -gravity;
    } else if (collisionSide == "top" && vy <= 0) {
      vy = 0;
    } else if (collisionSide == "right" && vx >= 0) {
      vx = 0;
    } else if (collisionSide == "left" && vx <= 0) {
      vx = 0;
    }
    if (collisionSide != "bottom" && vy > 0) {
      isOnGround = false;
    }
  }
}

void drawButton(float x, float y, float w, float h, color filling, String caption){
  fill(filling);
  stroke(255);
  strokeWeight(1);
  rectMode(CENTER);
  textAlign(CENTER,CENTER);
  textSize(h/2);  //height/2
  rect(x,y,w,h);
  fill(255);
  text(caption,x,y);
}
void drawButton2(float x, float y, float w, float h, color filling, String caption){
  fill(filling);
  stroke(255);
  strokeWeight(1);
  rectMode(CENTER);
  textAlign(CENTER,CENTER);
  textSize(h/2);  //height/2
  rect(x,y,w,h);
  fill(255);
  text(caption,x,y);
}

class Bullet {
  float w,h,x,y;
  float halfWidth,halfHeight;
  float vx,vy;
  boolean firing;

  Bullet(){
    w = 35;
    h = 10;
    x = 0;
    y = -h;
    halfWidth = w/2;
    halfHeight = h/2;
    vx = 0;
    vy = 0;
    boolean firing = false;

  }
  void fire(float _x, float _y, float _w, boolean _facingRight){
    if (!firing){
      y = _y+24;
      firing = true;
      if (_facingRight == true){
        vx = 15;
        x = _x + _w - 35;
      }else{
        vx = -15;
        x = _x;
      }

    }
  }
  void reset(){
    x = 0;
    y = -h;
    vx = 0;
    vy = 0;
    firing = false;
  }
  void update(){
    if (firing){
      x += vx;
      y += vy;      
    }
    ////check boundaries
    if (x < 0 || x > width || y < 0 || y > height){
      reset();
    }
  }
  void display(){
    // fill(255,0,0);
    // rect(x,y,w,h);
    image(laser,x,y);
  }
  //void checkBullet(){
  //   rect(rectx,recty,20,20);
  //float d = dist(rectx,recty,x,y);
  //if(d<100)
  //print("less than 10"); 
  //}
}

void mousePressed(){
   if(mousePressed){
     if(scn==0 && mouseX>360 && mouseX<440 && mouseY>230 && mouseY<270)
     scn = 1;
     if( scn==9 && mouseX>360 && mouseX<440 && mouseY>230 && mouseY<270)
     scn = 0;
   }
  
  
}

color fill1 = color(148,0,211);
void scene0(){
  drawButton(400,250,80,40,fill1,"PLAY");
  text( "My Platform Game!", 400,182);
  text("By Felipe Portela Chalhub", 411, 457);
}

void scene1(){
background(bk);

 
platform1 = loadImage("platform_13.png");
platform2 = loadImage("platform_14.png");


  p1.update();
  p1.checkBoundaries();
  p1.display1();


    if (space){
      if (firingTimer.isFinished()){
      bullets[nextBullet].fire(p1.x, p1.y, p1.w, p1.facingRight);
      nextBullet = (nextBullet+1)%bullets.length;
      firingTimer.start();
    }
    }
  
  
  for (int i = 0; i < bullets.length; ++i) {
    bullets[i].update();
    bullets[i].display();
   // bullets[i].checkBullet();
    
  }

  
  platforms = new Platform[13];  
  platforms[0] = new Platform (-10,9*H,W+20,64,"safe");
  platforms[1] = new Platform (W-1,9*H,W+10,64,"safe");
  platforms[2] = new Platform ((2*W)-1,9*H,W+10,64,"safe");
  platforms[3] = new Platform ((3*W)-1,9*H,W+10,64,"safe");
  platforms[4] = new Platform ((4*W)-1,9*H,W+10,64,"safe");
  platforms[5] = new Platform ((5*W)-1,9*H,W-32,64,"safe");
  
  
  platforms[6] = new Platform ((8*W)-1,11*H,W+10,64,"safe");
  platforms[7] = new Platform ((9*W)-1,11*H,W+10,64,"safe");
  platforms[8] = new Platform ((10*W)-1,11*H,W+32,64,"safe");


  platforms[9] = new Platform ((12*W)-1,9*H,W+10,64,"safe");
  platforms[10] = new Platform ((13*W)-1,9*H,W+10,64,"safe");
  platforms[11] = new Platform ((14*W)-1,9*H,W+10,64,"safe");
  platforms[12] = new Platform ((15*W)-1,9*H,W+108,64,"safe");

  


    for (int i = 0; i < platforms.length; ++i) {
    platforms[i].display();
  }
    for (int i = 0; i < platforms.length; ++i) {
    rectangleCollisions(p1,platforms[i]);
    p1.checkPlatforms();

    
  }


}

void scene9(){
  background(0);
  drawButton2(400,250,80,40,fill1,"Menu");
  text( "GAME OVER", width/2,height/2);
 
}
